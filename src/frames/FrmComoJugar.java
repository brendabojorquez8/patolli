/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

/**
 *
 * @author Zannie
 */
public class FrmComoJugar extends javax.swing.JFrame {

    /**
     * Creates new form FrmComoJugar
     */
    public FrmComoJugar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInstrucciones = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRegresar.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        txtInstrucciones.setEditable(false);
        txtInstrucciones.setColumns(20);
        txtInstrucciones.setForeground(new java.awt.Color(255, 255, 255));
        txtInstrucciones.setRows(5);
        txtInstrucciones.setText("TABLERO:\nEl tablero es en forma de aspa (X) con cuatro \ndivisiones y casillas variables dependiendo del\ncreador de la sala con un máximo de 14 casillas \npor aspa, hasta un mínimo de 8 casillas.\n\nJUGADORES:\nSe permiten de 2 a 4 jugadores máximo, cada uno\ninicia de un extremo de la cruz o equis del \ntablero.\n\nFICHAS:\nSe inicia como mínimo de 2 y como máximo de 6 \nfichas para cada jugador, dependiendo de lo \nextensa que se quiera la partida. Estas son de \ndiferentes colores (un color para cada jugador), \nque irán avanzando por las casillas del tablero \nen dirección de las agujas del reloj, pasando por \ntodas las casillas hasta llegar a la salida, que \nserá la misma aspa por la que se inició.\n\nCAÑAS:\nEn vez de dados se usan 5 cañas, que de un lado \ntienen dibujado un punto y del otro estarán \ntotalmente lisas. Cada jugador deberá lanzar las\n5 cañas en su turno correspondiente y dependiendo\ncomo caigan podrá avanzar el número de casillas,\ncomo se indica a continuación:\n\t-1 caña con punto y las demás lisas, se \n\t avanza 1 casilla.\n\t-2 cañas con punto y las demás lisas, se \n\t avanzan 2 casillas.\n\t-3 cañas con punto y las demás lisas, se \n\t avanzan 3 casillas.\n\t-4 cañas con punto y la restante lisa, se \n\t avanzan 4 casillas.\n\t-5 cañas con punto, se avanzan 10 \n\t casillas.\n\t-5 cañas mostrando la cara lisa, no se \n\t avanza y se cede el turno al siguiente \n\t jugador.\n\nAPUESTAS:\nVamos a tener un fondo fijo de apuesta para cada \njugador (configurable por el creador de la sala) \ny un monto variable para apostar por turno \n(configurable por el creador de la sala). Si a un\njugador se le acaba el fondo de apuestas, sale \ndel juego automáticamente.\n\nMOVIMIENTOS:\n- Para ingresar de inicio una ficha en el tablero \n  se tiene que sacar al menos un punto en la \n  tirada de los 5 dados. Si la tirada no es \n  exitosa debe pagar una apuesta a los \n  contrincantes.\n- Una vez con una ficha adentro, cada vez que un \n  jugador logra obtener un punto en su tirada \n  tiene la posibilidad de incorporar una ficha en\n  el tablero, esto hasta que logre introducir \n  todas sus fichas.\n- Si falta una ficha a ingresar y el jugador saca\n  un punto, no puede introducir una nueva ficha \n  en el tablero, si tiene una a una casilla de \n  llegar a la meta, primero se avanza esta última,\n  y la otra ficha tendrá que espera hasta que \n  salga un uno nuevamente.\n- Para ingresar una ficha, esta se coloca en la \n  casilla central del tablero que le corresponde\n  (el contrario a la salida).\n- Con cada lanzada se mueve una sola ficha, en \n  el orden en que las mismas fueron entrando al \n  tablero. Por ejemplo: vamos a suponer que un \n  jugador tiene ya una ficha ingresada al tablero,\n  y en su siguiente lanzada obtiene 1, por lo \n  tanto, ingresa una nueva ficha; en el siguiente \n  turno, la lanzada sería para avanzar la ficha \n  que ingresó primero, luego en su siguiente \n  lanzada, se moverá la segunda ficha, y así \n  sucesivamente.\n- Se pudiera escoger qué ficha avanzar pagando \n  una apuesta.\n- No puede haber dos fichas de diferente color en\n  la misma casilla. Si al hacer la tirada, la \n  ficha cae en una casilla ocupada, se tienen las\n  siguientes opciones.\n\t- Si la casilla es una de las 4 centrales,\n\t  la ficha que está actualmente en la \n\t  casilla es eliminada.\n\t- Si la casilla no es de las centrales, \n\t  la ficha que cayó en la casilla ocupada \n\t  se devuelve a la casilla de donde \n\t  partió.\n- Si un jugador saca una combinación en la que no \n  le permita avanzar ninguna pieza (todas las \n  cañas lisas) deberá pagar una apuesta.\n- Si el jugador cae en una casilla con triángulo \n  se paga doble apuesta.\n- Si un jugador se queda sin fichas \n  automáticamente pierde la partida.\n- Cuando una ficha llega a la meta se cobra una \n  apuesta a todos los contrincantes y se realiza \n  una nueva jugada.\n- Cuando se cae en la zona semicircular que hay al\n  final de cada brazo del tablero (hay ocho \n  casillas), juega dos turnos seguidos.\n- Gana el jugador que logre meter primero todas \n  sus fichas en la meta o en su defecto, aquel que\n  logre meter el mayor número de fichas.");
        txtInstrucciones.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtInstrucciones.setEnabled(false);
        jScrollPane1.setViewportView(txtInstrucciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRegresar)))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegresar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        FrmEntrada entrada = new FrmEntrada();
        entrada.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmComoJugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmComoJugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmComoJugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmComoJugar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmComoJugar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegresar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtInstrucciones;
    // End of variables declaration//GEN-END:variables
}
